

mysql> create table student(
    ->      sid int primary key,
    ->      
    ->      sname varchar(15)not null,
    ->      address varchar(50));




mysql>  create table course(
    ->      cid int primary key,
    ->      
    ->      cname varchar(20)not null,
    ->      duration int check(duration>0),
    ->      capacity int check(capacity between 40 and 100)
    ->      );


create table marks(
studid int,
courseid int,
marks int,
constraint pk primary key(studid,courseid),
constraint fk_sid foreign key(studid) references student(sid) 
on update cascade,
constraint fk_cid foreign key(courseid) references course(cid)
on update cascade
);
41. delete all employees working in alan's department
42. change salary of Alan to the salary of Miller.
43. change salary of all emplees who working in Wall's department to the salary of Miller.
44. list all employees with salary > either Smith's salary or alan's sal
45. list all employees who earn more than average sal of dept 10
46. list all employees who earn more than average sal of Alan's department
47. list all employees who are working in purchase department
48. list all employees who earn more than average salary of their own department
49. list all employees who earn sal < than their managers salary
50. list all employees who are earning more than average salary of their job
51. display employee name and department
52. display empno,name,department name and grade (use emp,dept and salgrade table)
53. list all employees number,name, mgrno and manager name
54. create following tables and solve following questions(primary keys are marked in yellow)
foreign keys are marked in green
product(pid,pname,price,qty,cid,sid)
salesman (sid,sname,address)
category(cid,cnam,descritpion)





mysql> create table category(cid
    -> int primary key,cname varchar(20),description varchar(100));
mysql> insert into category values(1,'stationary','school stationary items');
mysql> insert into category values(2,'grocries','grocery items available');
mysql> insert into category values(3,'fruits','seasonal fruits  available');

mysql> create table salesman(sid int primary key,sname varchar(20),address  varchar(100));
Query OK, 0 rows affected (0.03 sec)
mysql> insert into salesman values(1,'rahul','akurdi pune');
Query OK, 1 row affected (0.01 sec)

mysql> insert into salesman values(2,'rajat',' thane mumbai');
Query OK, 1 row affected (0.00 sec)

mysql> insert into salesman values(3,'ankush','  sector-4 nashik');
Query OK, 1 row affected (0.00 sec)


mysql> create table Product(
    -> pid int,pname varchar(20),price double,qty int ,cid int,sid int,
    -> constraint fk_Pcid foreign key(cid) references category(cid),
    -> constraint fk_Psid foreign key(sid) references salesman(sid)); 

mysql> insert into product values(1,'pencil',10,50 ,1,2);
Query OK, 1 row affected (0.01 sec)

mysql> insert into product values(1,'notebook',100,100 ,1,2);
Query OK, 1 row affected (0.00 sec)

mysql> insert into product values(1,'pineaple',70,45 ,3,1);
Query OK, 1 row affected (0.00 sec)

mysql> insert into product values(1,'strawberry box',40,50 ,3,1);
Query OK, 1 row affected (0.00 sec)

mysql> insert into product values(1,'sugar',30,50 ,2,3);
Query OK, 1 row affected (0.00 sec)

mysql> insert into product values(1,'flour',20,50 ,2,3);
Query OK, 1 row affected (0.01 sec)
 
 mysql> select * from product;
+------+----------------+-------+------+------+------+
| pid  | pname          | price | qty  | cid  | sid  |
+------+----------------+-------+------+------+------+
|    1 | pencil         |    10 |   50 |    1 |    2 |
|    1 | notebook       |   100 |  100 |    1 |    2 |
|    1 | pineaple       |    70 |   45 |    3 |    1 |
|    1 | strawberry box |    40 |   50 |    3 |    1 |
|    1 | sugar          |    30 |   50 |    2 |    3 |
|    1 | flour          |    20 |   50 |    2 |    3 |
+------+----------------+-------+------+------+------+
6 rows in set (0.00 sec)

mysql> select * from category;
+-----+------------+----------------------------+
| cid | cname      | description                |
+-----+------------+----------------------------+
|   1 | stationary | school stationary items    |
|   2 | grocries   | grocery items available    |
|   3 | fruits     | seasonal fruits  available |
+-----+------------+----------------------------+
3 rows in set (0.00 sec)

mysql> select * from salesman;
+-----+--------+-------------------+
| sid | sname  | address           |
+-----+--------+-------------------+
|   1 | rahul  | akurdi pune       |
|   2 | rajat  |  thane mumbai     |
|   3 | ankush |   sector-4 nashik |
+-----+--------+-------------------+
3 rows in set (0.00 sec)


1. list all product name,their category name and name of a person, who sold that product

mysql> select p.pname,s.sname,c.cname from
    -> product p inner join category c on
    -> p.cid = c.cid inner join salesman s on
    -> p.sid = s.sid;            
+----------------+--------+------------+
| pname          | sname  | cname      |
+----------------+--------+------------+
| pencil         | rajat  | stationary |
| notebook       | rajat  | stationary |
| sugar          | ankush | grocries   |
| flour          | ankush | grocries   |
| pineaple       | rahul  | fruits     |
| strawberry box | rahul  | fruits     |
+----------------+--------+------------+

2. list all product name and salesman name for all salesman who stays in pune

select p.pname, s.sname, s.address 
from product p inner join salesman s 
on p.sid = s.sid
where address like 'pune';

3. list all product name and category name

select p.pname , c.cname 
from product p inner join category c
where p.cid = c.cid;

55. create following tables and solve following questions(primary keys are marked in yellow)
foreign keys are marked in green


faculty(fid,fname,sp.skill1,sp.skill2)
courses(cid,cname,rid,fid)
room(roomid,rname,rloc)
faculty
fid fname spskill1 spskill2
10 kjzhcjhz a b
11 sdd x z
12 lksjk a x
13 ksdjlkj a b

courses
cid cname rid fid
121 DBDA 100 10
131 DAC 101
141 DTISS
151 DIOT 105 12

Room
roomid rname rloc
100 jasmin 1st floor
101 Rose 2nd floor
105 Lotus 1st floor
103 Mogra 1st floor

create table courses(
     cid int primary key,
     cname varchar(20),
     rid int, fid int
     constraint fk_con1 foreign key(rid) references room(roomid),
     constraint fk_con2 foreign key(fid) references faculty(fid)
     );



1. list all courses for which no room is assigned. And all rooms for which are
available

2. list all faculties who are not allocated to any course and rooms which are not
allocated to any course
3. list all rooms which are allocated or not allocated to any courses

4. list all rooms which are not allocated to any courses
5. display courses and faculty assigned to those courses whose special skill is
database
6. display time table --- it should contain course details , faculty and room
details

56. create following tables with given constraints
product---- qty >0, default 20.00,pname not null and unique
prodid pname qty price catid sid
123 lays 30 30.00 1 12
111 pepsi 40 50.00 4 11
134 nachos 50 50.00 1 12
124 dairy milk 40 60.00 2 14
124 pringles 40 60.00 1 14

saleman ----- sname -----not null
sid sname city
11 Rahul Pune
12 Kirti Mumbai
13 Prasad Nashik
14 Arnav Amaravati

category ---- cname unique and not null
cid cname description
1 chips very crunchy
2 chocolate very chocolaty
3 snacks yummy
4 cold drinks thanda thanda cool cool

1. List all products with category chips
2. display all products sold by kirti
3. display all salesman who do not sold any product
4. display all category for which no product is there
5. display all products with no category assigned
6. list all salesman who stays in city with name starts with P or N
7. add new column in salesman table by name credit limit
     
delimiter //
 create procedure display_remark(eno int,out remark varchar(20))
 begin
     declare vnm varchar(30);
     declare vsal, vcomm double(9,2);
     select ename,sal, comm into vnm,vsal,vcomm
     from emp
     where empno = eno;
     if vcomm is null or vcomm = 0 then
     set remark = 'need improvement';
     elseif vcomm<= 300 then
     set remark= 'ok';
     elseif vcomm<=500 then 
     set remark = 'excellent';
     else
     set remark = 'more than excellent';
     endif;
     select vnm,vsal,vcomm,remark;
     end//
     delimiter ;

     call display_remark(7902,@rema)





